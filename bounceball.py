import pygame, sys
from pygame.locals import *
from random import *
import time

RED = (255,0,0)
WHITE = (255,255,255)
BLACK = (0,0,0)
YELLOW = (255,225,51)
BLUE = (0,0,200)
DISPLAY = pygame.display.set_mode([1280,720])
pygame.display.set_caption("BounceBall")
clock = pygame.time.Clock()
running = True
dt = clock.tick(240)
gravityConst = 0.01*dt
clock = pygame.time.Clock()
getStar = 0
star_img = pygame.image.load("images\\star.png")
block_img = pygame.image.load("images\\block.png")
start_img = pygame.image.load("images\\start.png")
start_pressed_img = pygame.image.load("images\\start_pressed.png")
jump_img = pygame.image.load("images\\jump_up.png")
spike_img = pygame.image.load("images\\spike.png")
disp_img = pygame.image.load("images\\glass.png")

'''
맵 작성 요령
가로25 / 세로15
B = 공(하나만 존재)
P = 플랫폼(정사각형)
S = 별(하나 이상 필요)
J = 점프강화
D = 일회용
M = 가시
'''
gridScale = [
    [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
    [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
    [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
    [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
    [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
    [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
    [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
    [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
    [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
    [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
    [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
    [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
    [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
    [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
    [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "]
]
gridSample = [
    [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
    [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
    [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
    [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
    [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
    [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
    [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
    [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
    [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
    [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
    [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
    [" "," "," "," "," ","P"," ","P","P","P"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
    ["B"," "," ","P"," ","P"," "," "," "," "," "," ","S"," "," "," "," "," "," "," "," "," "," "," "," "],
    ["P","P","P","P","J","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P"],
    [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "]
]

mapGrid = [
    #Stage1
    [
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" ","P"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","P"," "],
        [" ","P","B","S"," ","S"," ","S"," ","S"," ","S"," ","S"," ","S"," ","S"," ","S"," ","S"," ","P"," "],
        [" ","P","S"," ","S"," ","S"," ","S"," ","S"," ","S"," ","S"," ","S"," ","S"," ","S"," ","S","P"," "],
        [" ","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P"," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "]
    ],
    #Stage2
    [
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        ["B"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        ["P","P","P"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," ","S"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," ","S"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," ","S"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," ","S"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","S"," "],
        [" "," "," "," ","S"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","S"," ","S"],
        [" "," "," "," ","S"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","P","P","P"],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","P"," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","P"," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","P"," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," ","P"," "," "," "," "," "," "," "," "," "," "],
        ["M","M","M","M","M","P","P","P","P","P","P","P","P"," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "]
    ],
    #Stage3
    [
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," ","B"," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," ","P"," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," ","S"," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," ","D"," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," ","M"," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," ","S"," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," ","D"," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," ","M"," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," ","S"," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," ","M"," "," "," "," "," "," "," "," "," "," "," "," "," "]
    ],
        #Stage4
        [
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," ","P"," ","M","M","M"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        ["B"," "," ","P"," ","P"," "," "," "," "," "," ","S"," "," "," "," "," "," "," "," "," "," "," "," "],
        ["P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P"],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "]
    ],
        #Stage5
        [
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," ","P"," ","P","P","P"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        ["B"," "," ","P"," ","P"," "," "," "," "," "," ","S"," "," "," "," "," "," "," "," "," "," "," "," "],
        ["P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P"],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "]
    ],
        #Stage6
        [
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," ","P"," ","P","P","P"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        ["B"," "," ","P"," ","P"," "," "," "," "," "," ","S"," "," "," "," "," "," "," "," "," "," "," "," "],
        ["P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P"],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "]
    ],
        #Stage7
        [
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," ","P"," ","P","P","P"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        ["B"," "," ","P"," ","P"," "," "," "," "," "," ","S"," "," "," "," "," "," "," "," "," "," "," "," "],
        ["P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P"],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "]
    ],
        #Stage8
        [
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," ","P"," ","P","P","P"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        ["B"," "," ","P"," ","P"," "," "," "," "," "," ","S"," "," "," "," "," "," "," "," "," "," "," "," "],
        ["P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P"],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "]
    ],
        #Stage9
        [
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," ","P"," ","P","P","P"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        ["B"," "," ","P"," ","P"," "," "," "," "," "," ","S"," "," "," "," "," "," "," "," "," "," "," "," "],
        ["P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P","P"],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "]
    ],
        #Stage10
        [
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," ","B"," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," ","J"," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," ","S"," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," ","D"," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," ","M"," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," ","S"," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," ","D"," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," ","M"," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," ","S"," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," ","M"," "," "," "," "," "," "," "," "," "," "," "," "," "]
    ]
]


class Ball:
    def __init__(self, x, y, dx, dy):
        self.x = x
        self.y = y
        self.dx = dx
        self.dy = dy
        self.radius = 10
        self.rect = pygame.Rect(self.x-10, self.y-10,20,20)
        
    def posUpdate(self):
        if self.y-self.radius >= 800:
            global gameStart
            time.sleep(0.5)
            gameStart = True
        if self.dy <= 1.5*dt:
            self.dy += gravityConst
        self.y += self.dy
        self.x += self.dx

    def drawBall(self):
        pygame.draw.circle(DISPLAY, YELLOW, (self.x,self.y), self.radius, width=0)
        pygame.draw.circle(DISPLAY, BLACK, (self.x,self.y), self.radius, width=1)

    def detectMove(self):
        if self.dx > 0.22*dt:
            self.dx = 0.22*dt
        elif self.dx < -0.22*dt:
            self.dx = -0.22*dt
        else:
            keys = pygame.key.get_pressed()
            if keys[pygame.K_a] and not keys[pygame.K_d]:
                self.dx -= 0.005*dt
            elif keys[pygame.K_d]and not keys[pygame.K_a]:
                self.dx += 0.005*dt
            else:
                if self.dx > 0:
                    self.dx -= 0.005*dt
                elif self.dx<0:
                    self.dx += 0.005*dt

class Platform:
    def __init__(self,x,y,type,num):
        self.type = type
        self.num = num
        self.x = 65 + x*46
        self.y = 15 + y*46
        
    def drawPlatform(self):
        if self.type == "normal":
            global DISPLAY
            DISPLAY.blit(block_img,(self.x,self.y))
            pygame.draw.rect(DISPLAY, BLACK, (self.x,self.y,46,46), width=1)
        elif self.type == "jump":
            DISPLAY.blit(jump_img,(self.x,self.y))
            pygame.draw.rect(DISPLAY, BLUE, (self.x,self.y,46,46), width=3)
        elif self.type == "disp":
            DISPLAY.blit(disp_img,(self.x,self.y))
            pygame.draw.rect(DISPLAY, BLACK, (self.x,self.y,46,46), width=1)

    def collideWithBall(self,target):
        if target.x+target.radius/2 > self.x and target.x-target.radius/2 < self.x+48 and target.dy > 0 and target.y+target.radius > self.y-3 and target.y+target.radius < self.y+48:
            if self.type == "normal":
                target.dy = -0.56*dt
            elif self.type == "jump":
                target.dy = -0.8*dt
            if self.type == "disp":
                target.dy = -0.56*dt
                platformList[self.num] = 0
        elif target.x+target.radius/2 > self.x and target.x-target.radius/2 < self.x+48 and target.dy <0 and target.y-target.radius > self.y and target.y-target.radius < self.y+48:
            target.dy = -target.dy
        if target.x+target.radius > self.x and target.x+target.radius < self.x+48 and target.y+target.radius/2 > self.y and target.y+target.radius/2 < self.y+48:
            target.dx = -0.17*dt
        elif target.x-target.radius > self.x and target.x-target.radius < self.x+48 and target.y+target.radius/2 > self.y and target.y+target.radius/2 < self.y+48:
            target.dx = 0.17*dt

class Star:
    def __init__(self,x,y,num):
        self.x = 65 + x*46
        self.y = 15 + y*46
        self.num = num
        self.rect = pygame.Rect(self.x,self.y,46,46)
    
    def drawStar(self):
        global DISPLAY
        DISPLAY.blit(star_img,(self.x,self.y))
    
    def collideWithBall(self, target):
        global starList
        target.rect = pygame.Rect(target.x-10, target.y-10,20,20)
        if target.rect.colliderect(self.rect):
            starList[self.num] = 0

class Spike:
    def __init__(self,x,y):
        self.x = 65 + x*46
        self.y = 15 + y*46
        self.rect_spike = pygame.Rect(self.x,self.y+5,46,18)

    def drawSpike(self):
        global DISPLAY
        DISPLAY.blit(spike_img,(self.x,self.y))

    def collideWithBall(self,target):
        global gameStart
        target.rect = pygame.Rect(target.x-10, target.y-10,20,20)
        if target.rect.colliderect(self.rect_spike):
            gameStart = True
        if target.x+target.radius > self.x and target.x+target.radius < self.x+48 and target.y+target.radius/2 > self.y+24 and target.y+target.radius/2 < self.y+48:
            target.dx = -4*dt
        elif target.x-target.radius > self.x and target.x-target.radius < self.x+48 and target.y+target.radius/2 > self.y+24 and target.y+target.radius/2 < self.y+48:
            target.dx = +4*dt
        if target.x+target.radius/2 > self.x and target.x-target.radius/2 < self.x+48 and target.dy <0 and target.y-target.radius > self.y+24 and target.y-target.radius < self.y+48:
            target.dy = -target.dy
            
def drawMap(grid):
    starNum = 0
    platformNum = 0
    global starList
    global platformList
    global ball
    for i in range(15):
        for j in range(25):
            if grid[i][j] == "B":
                ball.append(Ball(65+j*46+23,15+i*46+23,0,0))
            elif grid[i][j] == "P":
                platformList.append(Platform(j,i,"normal",platformNum))
                platformNum += 1
            elif grid[i][j] == "S":
                starList.append(Star(j,i,starNum))
                starNum += 1
            elif grid[i][j] == "J":
                platformList.append(Platform(j,i,"jump",platformNum))
                platformNum += 1
            elif grid[i][j] == "D":
                platformList.append(Platform(j,i,"disp",platformNum))
                platformNum += 1
            elif grid[i][j] == "M":
                spikeList.append(Spike(j,i))
    
stage = 0
scene = "lobby"
gameStart = True
grid = gridSample
#실행코드
while running:
    DISPLAY.fill(WHITE)
    if scene == "lobby":
        x,y = pygame.mouse.get_pos()
        DISPLAY.blit(start_img,(320,120))
        if pygame.Rect(531,313,205,96).collidepoint(x,y):
            DISPLAY.blit(start_pressed_img,(320,120))
        for event in pygame.event.get():
            if event.type == QUIT:
                running = False
            if event.type == MOUSEBUTTONUP:
                if event.button == 1 and pygame.Rect(531,313,205,96).collidepoint(x,y):
                    scene = "inGame"
                    gameStart = True
            
    elif scene == "inGame":
        for event in pygame.event.get():
            if event.type == QUIT:
                running = False
            if event.type == KEYDOWN:
                keys = pygame.key.get_pressed()
                if keys[pygame.K_l]:
                    stage += 1
                    gameStart = True
        if gameStart:
            getStar = 0
            platformList = []
            starList = []
            spikeList = []
            ball = []
            drawMap(mapGrid[stage])#gridSample(테스트용)를 mapGrid[stage]로 변경하면 만든 맵 출력
            gameStart = False
        for i in range(len(platformList)):
            if platformList[i] != 0:
                platformList[i].drawPlatform()
                platformList[i].collideWithBall(ball[0])
        for i in range(len(spikeList)):
            spikeList[i].drawSpike()
            spikeList[i].collideWithBall(ball[0])
        if len(starList) == getStar:
            if stage == 9:
                scene = "clear"
            else:
                time.sleep(0.5)
                stage += 1
                gameStart = True
        else:
            getStar = 0
            for i in range(len(starList)):
                if starList[i] != 0:
                    starList[i].drawStar()
                    starList[i].collideWithBall(ball[0])
                else: 
                    getStar += 1
        ball[0].detectMove()
        ball[0].posUpdate()
        ball[0].drawBall()

    elif scene == "clear":
        for event in pygame.event.get():
            if event.type == QUIT:
                running = False
        
    pygame.display.update()
    clock.tick(200)
