import pygame, sys
from pygame.locals import *
from random import *
import time
pygame.init()

RED = (255,0,0)
WHITE = (255,255,255)
BLACK = (0,0,0)
YELLOW = (255,225,51)
BLUE = (0,0,200)
DISPLAY = pygame.display.set_mode([1280,720])
bigfont = pygame.font.Font('NanumBarunGothicBold.otf', 70)
font = pygame.font.Font('NanumBarunGothicBold.otf', 20)
pygame.display.set_caption("Bouncy Ball")
clock = pygame.time.Clock()    
running = True
dt = 4
gravityConst = 0.03*dt
clock = pygame.time.Clock()
getStar = 0
star_img = pygame.image.load("images\\star.png")
star_img = pygame.transform.scale(star_img, (40,40))
block_img = pygame.image.load("images\\block.png")
jump_img = pygame.image.load("images\\jump_up.png")
spike_img = pygame.image.load("images\\spike.png")
disp_img = pygame.image.load("images\\glass.png")
lobby_img = pygame.image.load("images\\batang.jpg")
lobby_img = pygame.transform.scale(lobby_img, (1280,720))
ball_img = pygame.image.load("images\\ball.png")
ball_img = pygame.transform.scale(ball_img, (20,20))
clear_img = pygame.image.load("images\\clear.jpg")
clear_img = pygame.transform.scale(clear_img, (1280,720))
gameover_img = pygame.image.load("images\\gameover.png")
gameover_img = pygame.transform.scale(gameover_img, (1280,720))
background_img = pygame.image.load("images\\background.png")
background_img = pygame.transform.scale(background_img, (1280,720))

'''
맵 작성 요령
가로25 / 세로15
B = 공(하나만 존재)
P = 플랫폼(정사각형)
S = 별(하나 이상 필요)
J = 점프강화
D = 일회용
M = 가시(미구현)
'''

mapGrid = [
    #Stage1
    [
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" ","P"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","P"," "],
        [" ","P","B","S"," ","S"," ","S"," ","S"," ","S"," ","S"," ","S"," ","S"," ","S"," ","S"," ","P"," "],
        [" ","P","S"," ","S"," ","S"," ","S"," ","S"," ","S"," ","S"," ","S"," ","S"," ","S"," ","S","P"," "],
        [" ","P","P","M","P","M","P","M","P","M","P","M","P","M","P","M","P","M","P","M","P","M","P","P"," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "]
    ],
    #Stage2
    [
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" ","B"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        ["P","P","P"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," ","S"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," ","S"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," ","S"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," ","S"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","S"," "],
        [" "," "," "," ","S"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","S"," ","S"],
        [" "," "," "," ","S"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","P","P","P"],
        [" "," "," "," "," ","S"," "," "," "," "," "," "," "," "," "," "," "," "," "," ","P"," "," "," "," "],
        [" "," "," "," "," ","S"," "," "," "," "," "," "," "," "," "," "," "," ","D"," "," "," "," "," "," "],
        [" "," "," "," "," ","S"," "," "," "," "," "," "," "," "," "," ","D"," "," "," "," "," "," "," "," "],
        [" "," "," "," "," ","S"," "," "," "," "," "," "," "," ","P"," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," ","P","P","P","P","P","P","P","P","P"," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "]
    ],
    #Stage3
    [
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","S","S","S"," "," "," "],
        [" "," "," "," "," ","D"," ","D"," ","D"," ","S"," ","D"," ","D"," ","D"," ","P","P","P"," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," ","P"," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," ","J"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," ","J"," ","D"," ","D"," ","D"," ","S"," ","D"," ","D"," ","D"," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," ","P"," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","J"," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," ","B"," ","D"," ","D"," ","D"," ","S"," ","D"," ","D"," ","J"," "," "," "," "," "],
        [" "," "," "," ","P","P","P"," "," "," "," "," "," ","P"," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "]
    ],
        #Stage4
        [
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        ["S","S","S","S","S","S","S","S","S","S","S","S","S","S","S","S","S","S","S"," "," ","B"," "," ","S"],
        ["D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","D","P","P","P","P","P","S"],
        ["M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M"," "," "," "," "," ","S"],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","S"]
    ],
        #Stage5
        [
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," ","B"," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," ","S","M"," "," ","J","P","P","P"," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," ","J"," "," "," "," "," "," "," "," "," "," "," "," "," "," ","S"," "," "," "," "],
        [" ","S","M"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","D","P","S"," "," "," "],
        [" ","J"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","D"," "," ","S"," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","D"," "," "," "," ","S"," "," "],
        [" "," "," ","S","M"," "," "," "," "," "," "," "," "," "," "," ","D"," "," "," "," "," ","S"," "," "],
        [" "," "," ","J"," "," "," "," "," "," "," "," "," "," "," ","D"," "," "," "," "," "," ","S"," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," ","D"," "," "," "," "," "," "," "," ","S"," "],
        [" "," "," "," "," "," ","S"," ","S"," ","S"," "," ","D"," "," "," "," "," "," "," "," "," ","S"," "],
        [" "," "," "," "," ","S"," ","S"," ","S"," ","S","D"," "," "," "," "," "," "," "," "," "," ","S"," "],
        [" "," "," "," "," ","P","D"," ","D"," ","D","P"," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "]
    ],
        #Stage6
        [
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," ","M"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," ","S"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        ["B"," ","S"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        ["P"," ","P"," "," ","M"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," ","S"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," ","S"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," ","P"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," ","M"," ","M"," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," ","S"," ","S"," "," "," ","M"," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," ","S"," ","S"," ","P","P","P","P","P"," "," "," "," ","S"," "," "," "],
        [" "," "," "," "," "," "," "," ","P"," ","P"," "," ","P","P","P"," "," ","D","D"," ","P"," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," ","S"," ","S"," ","S"," ","D","D"," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," ","S"," ","S"," "," ","D","D"," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," ","M","P","P","P","M"," "," "," "," "," "," "," "," "]
    ],
        #Stage7
        [
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," ","S"," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," ","J"," "," "," ","S"," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," ","P"," "," "," "," "," ","S"," "," "," "," "," "," "," "," "," "," "," "],
        [" "," ","S"," "," ","P"," "," "," "," "," "," "," "," ","S"," "," "," "," "," "," "," "," "," "," "],
        [" "," "," ","P"," "," "," "," "," "," "," "," "," "," ","S"," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," ","S"," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," ","S"," "," "," "," "," "," "," "," "," "," "],
        ["J"," "," "," ","S"," "," "," "," "," "," "," "," "," "," ","S"," "," "," "," "," "," "," "," "," "],
        [" "," "," ","P"," "," "," "," "," "," "," "," "," "," "," ","S"," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","S"," "," "," "," "," "," "," ","S"," "],
        [" "," "," "," "," "," "," "," "," "," ","S"," "," "," "," ","D"," ","D"," ","D"," ","D"," ","M"," "],
        [" "," "," "," "," "," ","J"," ","D"," ","P"," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" ","B"," ","P"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        ["P","P","P"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "]
    ],
        #Stage8
        [
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","B"," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","J"," ","P"," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," ","M","S","M"," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," ","P","S","P"," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," ","P","S","P"," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," ","S","S","S"," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","S"," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," ","P","P","P","J"," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","M","S","M"," "],
        [" "," ","S"," "," "," "," "," "," "," "," "," "," "," ","S"," "," "," ","S"," "," ","P","S","P"," "],
        [" ","S"," ","S"," "," ","S"," "," "," ","S"," "," ","S"," ","S"," ","S"," ","S"," ","P","S","P"," "],
        ["S"," "," "," ","S","S"," ","S"," ","S"," ","S","S"," "," "," ","S"," "," "," ","S","S","S","S"," "],
        ["S"," "," "," ","S"," "," "," ","S"," "," "," ","S"," "," "," ","S"," "," "," ","S"," ","S"," "," "],
        [" "," "," "," ","J"," "," "," ","J"," "," "," ","J"," "," "," ","J"," "," "," ","J","D","D","D"," "]
    ],
        #Stage9
        [
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," ","B"," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," ","P"," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," ","P"," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," ","S"," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," ","D"," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," ","M"," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," ","S"," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," ","D"," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," ","M"," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," ","P"," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," ","S"," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," "," "," "," "," "," "," ","M"," "," "," "," "," "," "," "," "," "," "," "," "," "]
    ],
        #Stage10
    [
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
        [" "," "," "," "," ","D"," ","M","M","M","M"," ","S"," ","S"," ","S"," "," "," ","M"," "," "," "," "],
        [" "," "," "," ","D"," "," ","P","S","S"," "," ","S"," ","S"," ","S"," "," "," ","P"," "," "," "," "],
        [" "," "," ","D"," "," "," "," ","S","S"," "," ","D"," ","D"," ","D"," "," "," ","P"," "," "," "," "],
        [" ","M","D"," "," "," "," ","P","P","P"," "," ","M"," ","D"," ","M"," ","J"," "," "," ","S"," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," ","M"," "," "," "," "," "," "," ","S"," "," "],
        ["J"," "," "," "," ","S"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","S"," "," "],
        [" "," ","M"," "," ","S"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","S"," "," "],
        [" ","J","P","M"," ","S"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","S"," "," "],
        [" "," "," "," "," ","J"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","S"," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","S"," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","S"," "," "],
        ["B"," "," ","J"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","S"," "," "],
        ["P"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","S"," "," "],
        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","S"," "," "]
    ]
]


class Ball:
    def __init__(self, x, y, dx, dy):
        self.x = x
        self.y = y
        self.dx = dx
        self.dy = dy
        self.radius = 10
        self.image = ball_img
        self.mask = pygame.mask.from_surface(self.image.convert_alpha())
        self.rect = ball_img.get_rect(center = (self.x,self.y))
        
    def posUpdate(self):
        if self.y-self.radius >= 800:
            global gameStart
            time.sleep(0.5)
            gameStart = True
        if self.dy <= 7*dt:
            self.dy += gravityConst
        self.y += self.dy
        self.x += self.dx
        self.rect = ball_img.get_rect(center = (self.x,self.y+self.dy))
        self.mask = pygame.mask.from_surface(self.image.convert_alpha())

    def drawBall(self):
        global DISPLAY
        DISPLAY.blit(ball_img,(self.x-10,self.y-10))

    def detectMove(self):
        accConst = 0.02*dt
        lim = 0.435*dt
        global gameStart
        global stage
        global keys
        if self.dx > lim:
            self.dx = lim
        elif self.dx < -lim:
            self.dx = -lim
        else:
            if keys[pygame.K_LEFT] and not keys[pygame.K_RIGHT]:
                self.dx -= accConst
            elif keys[pygame.K_RIGHT] and not keys[pygame.K_LEFT]:
                self.dx += accConst
            else:
                if self.dx != 0:
                    if self.dx > accConst:
                        self.dx -= accConst/2
                    elif self.dx < -accConst:
                        self.dx += accConst/2
                    else:
                        self.dx = 0

class Platform:
    def __init__(self,x,y,type):
        self.type = type
        self.x = 65 + x*46
        self.y = 15 + y*46
        if self.type == "normal":
            self.image = block_img
            self.dy = -1*dt
        elif self.type == "jump":
            self.image = jump_img
            self.dy = -1.5*dt
        elif self.type == "disp":
            self.image = disp_img
            self.dy = -1*dt
        self.rect = block_img.get_rect(center = (self.x+23,self.y+23))
        self.mask = self.mask = pygame.mask.from_surface(self.image.convert_alpha())

    def drawPlatform(self):
            global DISPLAY
            DISPLAY.blit(self.image,(self.x,self.y))

    def collideWithBall(self,target):
        if target.x+target.radius/2 > self.x and target.x-target.radius/2 < self.x+48 and target.dy > 0 and target.y+target.radius > self.y-target.dy and target.y+target.radius < self.y+48:
                if self.type == "disp":
                    global dPNum
                    dPNum += 1
                    platformList.remove(self)
                target.dy = self.dy
        elif target.x+target.radius/2 > self.x and target.x-target.radius/2 < self.x+48 and target.dy <0 and target.y-target.radius > self.y and target.y-target.radius < self.y+48:
            target.dy = -target.dy
        if target.x+target.radius > self.x and target.x+target.radius < self.x+48 and target.y+target.radius/2 > self.y and target.y+target.radius/2 < self.y+48:
            target.dx = -0.3*dt
        elif target.x-target.radius > self.x and target.x-target.radius < self.x+48 and target.y+target.radius/2 > self.y and target.y+target.radius/2 < self.y+48:
            target.dx = 0.3*dt

class Star:
    def __init__(self,x,y):
        self.x = x
        self.y = y
        self.image = star_img
        self.rect = block_img.get_rect(center = (self.x+20,self.y+20))
        self.mask = self.mask = pygame.mask.from_surface(self.image.convert_alpha())
    
    def drawStar(self):
        global DISPLAY
        DISPLAY.blit(star_img,(self.x,self.y))
    
    def collideWithBall(self, target):
        global starList
        offset = (self.rect.x - target.rect.x), (self.rect.y - target.rect.y), 
        if target.mask.overlap(self.mask, offset):
            starList.remove(self)
            return True
        else:
            return False

class Spike:
    def __init__(self,x,y):
        self.x = 65 + x*46
        self.y = 15 + y*46

    def drawSpike(self):
        global DISPLAY
        DISPLAY.blit(spike_img,(self.x,self.y))

    def collideWithBall(self,target):
        rect_spike = pygame.Rect(self.x,self.y+15,46,8)
        global gameStart
        global death
        if target.rect.colliderect(rect_spike):
            target.dy = 0
            death = True
            gameStart = True
        if target.x+target.radius > self.x and target.x+target.radius < self.x+48 and target.y+target.radius/2 > self.y+24 and target.y+target.radius/2 < self.y+48:
            target.dx = -5*dt
        elif target.x-target.radius > self.x and target.x-target.radius < self.x+48 and target.y+target.radius/2 > self.y+24 and target.y+target.radius/2 < self.y+48:
            target.dx = +5*dt
        if target.x+target.radius/2 > self.x and target.x-target.radius/2 < self.x+48 and target.dy <0 and target.y-target.radius > self.y+24 and target.y-target.radius < self.y+48:
            target.dy = -target.dy
            
def drawMap(grid):
    global starList
    global platformList
    global ball
    for i in range(15):
        for j in range(25):
            if grid[i][j] == "B":
                ball.append(Ball(65+j*46+23,15+i*46+23,0,0))
            elif grid[i][j] == "P":
                platformList.append(Platform(j,i,"normal"))
            elif grid[i][j] == "S":
                starList.append(Star(65+j*46+3,15+i*46+3))
            elif grid[i][j] == "J":
                platformList.append(Platform(j,i,"jump"))
            elif grid[i][j] == "D":
                platformList.append(Platform(j,i,"disp"))
            elif grid[i][j] == "M":
                spikeList.append(Spike(j,i))

stage = 0
scene = "lobby"
gameStart = True
death = False
#실행코드
while running:
    if scene == "lobby":
        DISPLAY.blit(lobby_img,(0,0))
        x,y = pygame.mouse.get_pos()
        for event in pygame.event.get():
            if event.type == QUIT:
                running = False
            if event.type == MOUSEBUTTONUP:
                if event.button == 1:
                    pygame.time.set_timer(USEREVENT,1000)
                    counter, text = 120, " 남은 시간: ".rjust(1)+'120'.rjust(1)
                    scene = "inGame"
                    stage = 0
                    gameStart = True
            
    elif scene == "inGame":
        DISPLAY.fill(WHITE)
        keys = pygame.key.get_pressed()
        for event in pygame.event.get():
            if event.type == QUIT:
                running = False
            elif event.type == KEYDOWN and event.key == K_u:
                stage += 1
                gameStart = True
            elif event.type == USEREVENT:
                counter -= 1
                text = " 남은 시간: ".rjust(1) + str(counter).rjust(1)

        if counter == 0:
            scene = "gameOver"

        if gameStart:
            if not death:
                time.sleep(0.2)
            else:
                death = False
            if stage < 10:
                getStar = 0
                platformList = []
                starList = []
                spikeList = []
                ball = []
                drawMap(mapGrid[stage])
                gameStart = False
            else:
                scene = "clear"

        dPNum = 0
        for i in range(len(platformList)):
            i -= dPNum
            platformList[i].drawPlatform()
            platformList[i].collideWithBall(ball[0])

        for i in range(len(spikeList)):
            spikeList[i].drawSpike()
            spikeList[i].collideWithBall(ball[0])

        if len(starList) == 0:
            stage += 1
            gameStart = True
        else:
            dNum = 0
            for i in range(len(starList)):
                i -= dNum
                starList[i].drawStar()
                if starList[i].collideWithBall(ball[0]):
                    dNum += 1

        if stage == 0:
            DISPLAY.blit(font.render("좌 / 우 화살표키로 이동", True, (0, 0, 0)), (530, 45))
        DISPLAY.blit(font.render(text, True, (0, 0, 0)), (5, 5))
        ball[0].detectMove()
        ball[0].posUpdate()
        ball[0].drawBall()

    elif scene == "gameOver":
        DISPLAY.blit(gameover_img,(0,0))
        DISPLAY.blit(bigfont.render("통과한 스테이지 : "+str(stage)+"개", True, (0, 0, 0)), (340, 300))
        for event in pygame.event.get():
            if event.type == QUIT:
                running = False
            if event.type == MOUSEBUTTONUP:
                if event.button == 1:
                    pygame.init()
                    scene = "lobby"

    elif scene == "clear":
        DISPLAY.blit(clear_img,(0,0))
        for event in pygame.event.get():
            if event.type == QUIT:
                running = False
            if event.type == MOUSEBUTTONUP:
                if event.button == 1:
                    pygame.init()
                    scene = "lobby"
    pygame.display.update()
    clock.tick(120)
